## EMQX Node

## Note: all fields in this section are immutable after EMQX started, and most of the time you only need to modify the value for the name and cookie.
node {
    ## The actions triggered when the alarm is activated
    ## Type: Formatted String
    ##   Format: any_name@any_domain or an_name@any_ip
    ##   Note: Make sure the IP resolve from the domain is deterministic and unique and never change
    name = "emqx@node1.emqx.io"

    ## Secret cookie is a random string that should be the same on all nodes in the cluster, but unique per EMQX cluster
    cookie = "Yzc0NGExM2Rj"

    ## Select a node role
    ## Possible values:
    ##   - core: This is a core node which provides durability of the client states, and takes care of writes
    ##   - replicant: This is a stateless worker node
    role = core

    ## Maximum number of simultaneously existing processes for this Erlang system
    process_limit = 2097152

    ## Maximum number of simultaneously open files and sockets for this Erlang system
    max_ports = 1048576

    ## Erlang's distribution buffer busy limit in kilobytes.
    ## Range from 1 to 2097152
    dist_buffer_size = 8192

    ## NOTE: keep this the same for all nodes in the cluster.
    ## Path to the persistent data directory.
    ## This config is pre-filled when the EMQX distribution package is built.
    ## You are advised to use the default value.
    data_dir = "data" # when running a zip package or in docker container
    #data_dir = "/var/lib/emqx" # when installed from deb/rpm packages

    ## Type: Periodic garbage collection interval
    global_gc_interval = 15m
}
## Dashboard on HTTPS
##
## Configure HTTPS for EMQX dashboard

dashboard {
    ## JWT token expiration time
    token_expired_time = 60m

    ## Support Cross-Origin Resource Sharing (CORS)
    cors = false

    listeners.https {
        ## Port or Address to listen on, 0 means disable
        bind = "0.0.0.0:18084"

        ssl_options {
            ## PEM format certificates chain.
            ## Server certificate as the first one,
            ## followed by its immediate issuer certificate
            ## then the issuer's issuer certificate, and so on.
            ## Root CA certificate is optional.
            ## The path prefix (only prefix) can be an environment variable.
            certfile = "${EMQX_ETC_DIR}/certs/cert.pem"

            ## PEM format private key
            keyfile = "${EMQX_ETC_DIR}/certs/key.pem"

            ## Optional. When need to verify client certificates, list trusted client's root CA certificates in this file
            cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"

            ## Optional. Force client to send their certificate chain during TLS handshake.
            #fail_if_no_peer_cert = true
	    
            ## Optional 
	    #verify = verify_peer
        }

        ## Socket acceptor pool size for TCP protocols
        num_acceptors = 8

        ## Maximum number of concurrent connections
        max_connections = 512

        ## Defines the maximum length that the queue of pending connections can grow to
        backlog = 1024

        ## Send timeout for the socket
        send_timeout = 10s

        ## Enable IPv6 support, default is false, which means IPv4 only
        inet6 = false

        ## Disable IPv4-to-IPv6 mapping for the listener
        ipv6_v6only = false

        ## Enable support for ProxyProtocol v2 header
        proxy_header = false
    }
}

listeners.ssl.default {
    ## Port or Address to listen on, 0 means disable
    bind = "0.0.0.0:8883"
    enabled = true
    acceptors = 16
    enable_authn = true
    max_connections = infinity
    mountpoint = ""
    proxy_protocol = false
    proxy_protocol_timeout = 3s
    tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
    }
    ssl_options {
        ## Trusted PEM format CA certificates bundle file
        cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"

        ## PEM format certificates chain file
        certfile = "${EMQX_ETC_DIR}/certs/cert.pem"

        ## PEM format private key file
        keyfile = "${EMQX_ETC_DIR}/certs/key.pem"

        ## Enable or disable peer verification
        verify = verify_peer  ## use verify_peer to enable

        ## if `verify' is enabled, whit true, the connection fails if the client does not have a certificate to send
        fail_if_no_peer_cert = true

        ## Enable TLS session reuse
        reuse_sessions = true

        ## Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path
        depth = 10

        ## Which versions are to be supported
        versions = [tlsv1.3, tlsv1.2]

        ## TLS cipher suite names
        ## Note: By default, all available suites are supported, you do not need to set this
        ciphers = "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,ECDHE-RSA-AES256-GCM-SHA384"

        ## Allows a client and a server to renegotiate the parameters of the SSL connection on the fly
        secure_renegotiate = true

        ## Log level for SSL communication
        ## Type: emergency | alert | critical | error | warning | notice | info | debug | none | all
        log_level = all

        ## Hibernate the SSL process after idling for amount of time reducing its memory footprint
        hibernate_after = 5s

        ## Forces the cipher to be set based on the server-specified order instead of the client-specified order
        honor_cipher_order = true

        ##  Setting this to false to disable client-initiated renegotiation
        client_renegotiation = true

        ## Maximum time duration allowed for the handshake to complete
        handshake_timeout = 15s

        ocsp {
             enable_ocsp_stapling = false
             responder_url = "http://ocsp.example.com"
             issuer_pem = "${EMQX_ETC_DIR}/certs/ocsp-issuer-cert.pem"
             refresh_http_timeout = 15s
             refresh_interval = 5m
        }
    }
    access_rules = [
        "allow 192.168.1.0/24",
        "deny all"
    ]
}

## Log to file

log.file {
    ## Enable file log handler
    enable = false

    ## Log level
    ## Type: debug | info | notice | warning | error | critical | alert | emergency
    level = warning

    ## Log formatter, text for free text, and json for more structured logging
    ## Type: text | json
    formatter = text

    ## Time offset for formatting the timestamp
    ## Type:
    ##   - system :: local system time
    ##   - utc :: UTC time
    ##   - +-[hh]:[mm]: user specified time offset, such as "-02:00" or "+00:00" Defaults to: system
    time_offset = system

    ## Maximum number of log files
    ## Type: Range from 1 to 128
    rotation_count = 10

    ## This parameter controls log file rotation
    ## Type:
    ##  - infinity :: the log file will grow indefinitely
    ##  - ByteSize :: the log file will be rotated once it reaches this value in bytes
    rotation_size = 50MB
}

log.console {
    enable = true
    level = debug
    formatter = text
}

authorization {
    no_match = deny
}


## Authentication settings


authentication = [
    {
         mechanism = password_based
         backend = http
         enable = true
         method = post
         body {
	     client_id = "${clientid}"
             username = "${username}"
             password = "${password}"
         }
         headers {
             "Content-Type" = "application/json"
             "X-Request-Source" = "EMQX"
         }
     }
]


authorization {
  ## allow | deny
  no_match = deny
  ## disconnect | ignore
  deny_action = disconnect

  cache {
    enable = true
    max_size = 32
    ttl = 30m
  }
  sources: [
    {
      type = file
      enable = true
      path = "etc/acl.conf"
    }
  ]
}
