## Dashboard on HTTPS
##
## Configure HTTPS for EMQX dashboard

dashboard {
    ## JWT token expiration time
    token_expired_time = 60m

    ## Support Cross-Origin Resource Sharing (CORS)
    cors = false

    listeners.https {
        ## Port or Address to listen on, 0 means disable
        bind = "0.0.0.0:18084" ## or just a port number, e.g. 18084

        ssl_options {
            ## PEM format certificates chain.
            ## Server certificate as the first one,
            ## followed by its immediate issuer certificate
            ## then the issuer's issuer certificate, and so on.
            ## Root CA certificate is optional.
            ## The path prefix (only prefix) can be an environment variable.
            certfile = "${EMQX_ETC_DIR}/certs/cert.pem"

            ## PEM format private key
            keyfile = "${EMQX_ETC_DIR}/certs/key.pem"

            ## Optional. When need to verify client certificates, list trusted client's root CA certificates in this file
            # cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"

            ## Optional. Force client to send their certificate chain during TLS handshake.
            # fail_if_no_peer_cert = true
        }

        ## Socket acceptor pool size for TCP protocols
        num_acceptors = 8

        ## Maximum number of concurrent connections
        max_connections = 512

        ## Defines the maximum length that the queue of pending connections can grow to
        backlog = 1024

        ## Send timeout for the socket
        send_timeout = 10s

        ## Enable IPv6 support, default is false, which means IPv4 only
        inet6 = false

        ## Disable IPv4-to-IPv6 mapping for the listener
        ipv6_v6only = false

        ## Enable support for ProxyProtocol v2 header
        proxy_header = false
    }
}

## MQTT over TCP Listener

listeners.tcp.my_tcp_listener_name {
    ## Port or Address to listen on, 0 means disable
    bind = 1883 ## or with an IP e.g. "127.0.0.1:1883"

    ## Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx
    proxy_protocol = false

    ## Timeout for proxy protocol
    proxy_protocol_timeout = 8

    ## When publishing or subscribing, prefix all topics with a mountpoint string
    ## mountpoint = "mqtt" ## Do not set this unless you know what is it for

    ## Client authentication
    ## Type:
    ##   - true :: enable
    ##   - false :: disable
    ##   - quick_deny_anonymous :: denied immediately without if username is not provided
    enable_authn = true

    ## The access control rules for this listener
    ## Type: See: https://github.com/emqtt/esockd#allowdeny
    access_rules = ["allow all"]

    ## Socket acceptor pool size for TCP protocols
    acceptors = 16

    ## Maximum number of simultaneous connections
    ## Type: infinity | Integer
    max_connections = infinity

    tcp_options {
        ## TCP backlog defines the maximum length that the queue of pending connections can grow to
        backlog = 1024

        ## The TCP send timeout for the connections
        send_timeout = 15s

        ## Timeout for proxy protocol
        send_timeout_close = true

        ## The TCP receive buffer (OS kernel) for the connections
        recbuf = 2KB

        ## The TCP send buffer (OS kernel) for the connections
        sndbuf = 4KB

        ## The size of the user-space buffer used by the driver
        buffer = 4KB

        ## The socket is set to a busy state when the amount of data queued internally by the VM socket implementation reaches this limit
        high_watermark = 1MB

        ## The TCP_NODELAY flag for the connections
        nodelay = true

        ## The SO_REUSEADDR flag for the connections
        reuseaddr = true

        ## Enable TCP keepalive for MQTT connections over TCP or SSL
        ## Type: three comma separated numbers in the format of 'Idle,Interval,Probes'
        ##    - Idle: The number of seconds a connection needs to be idle before the server begins to send out keep-alive probes (Linux default 7200).
        ##    - Interval: The number of seconds between TCP keep-alive probes (Linux default 75).
        ##    - Probes: The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response is obtained from the other end (Linux default 9).
        ## For example "240,30,5" means: EMQX should start sending TCP keepalive probes after the connection is in idle for 240 seconds, and the probes are sent every 30 seconds until a response is received from the MQTT client, if it misses 5 consecutive responses, EMQX should close the connection
        keepalive = "none"
    }
}
## MQTT over TLS(SSL) Listener

listeners.ssl.my_ssl_listener_name {
    ## Port or Address to listen on, 0 means disable
    bind = 8883 ## or with an IP e.g. "127.0.0.1:8883"
    enabled = true
    acceptors = 16
    enable_authn = true
    max_connections = infinity
    mountpoint = ""
    proxy_protocol = false
    proxy_protocol_timeout = 3s
    tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
    }
    ssl_options {
        ## Trusted PEM format CA certificates bundle file
        cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"

        ## PEM format certificates chain file
        certfile = "${EMQX_ETC_DIR}/certs/cert.pem"

        ## PEM format private key file
        keyfile = "${EMQX_ETC_DIR}/certs/key.pem"

        ## Enable or disable peer verification
        verify = verify_none  ## use verify_peer to enable

        ## if `verify' is enabled, whit true, the connection fails if the client does not have a certificate to send
        fail_if_no_peer_cert = false

        ## Enable TLS session reuse
        reuse_sessions = true

        ## Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path
        depth = 10

        ## Which versions are to be supported
        versions = [tlsv1.3, tlsv1.2]

        ## TLS cipher suite names
        ## Note: By default, all available suites are supported, you do not need to set this
        ciphers = "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,ECDHE-RSA-AES256-GCM-SHA384"

        ## Allows a client and a server to renegotiate the parameters of the SSL connection on the fly
        secure_renegotiate = true

        ## Log level for SSL communication
        ## Type: emergency | alert | critical | error | warning | notice | info | debug | none | all
        log_level = notice

        ## Hibernate the SSL process after idling for amount of time reducing its memory footprint
        hibernate_after = 5s

        ## Forces the cipher to be set based on the server-specified order instead of the client-specified order
        honor_cipher_order = true

        ##  Setting this to false to disable client-initiated renegotiation
        client_renegotiation = true

        ## Maximum time duration allowed for the handshake to complete
        handshake_timeout = 15s

        ocsp {
             enable_ocsp_stapling = false
             responder_url = "http://ocsp.example.com"
             issuer_pem = "${EMQX_ETC_DIR}/certs/ocsp-issuer-cert.pem"
             refresh_http_timeout = 15s
             refresh_interval = 5m
        }
    }
}

## Log to file

log.file {
    ## Enable file log handler
    enable = true

    ## Log level
    ## Type: debug | info | notice | warning | error | critical | alert | emergency
    level = warning

    ## Log formatter, text for free text, and json for more structured logging
    ## Type: text | json
    formatter = text

    ## Time offset for formatting the timestamp
    ## Type:
    ##   - system :: local system time
    ##   - utc :: UTC time
    ##   - +-[hh]:[mm]: user specified time offset, such as "-02:00" or "+00:00" Defaults to: system
    time_offset = system

    ## Maximum number of log files
    ## Type: Range from 1 to 128
    rotation_count = 10

    ## This parameter controls log file rotation
    ## Type:
    ##  - infinity :: the log file will grow indefinitely
    ##  - ByteSize :: the log file will be rotated once it reaches this value in bytes
    rotation_size = 50MB
}
